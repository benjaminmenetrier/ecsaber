--- /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/util/IntSetParser.cc.tmp	2023-11-15 10:04:38.241783021 +0100
+++ /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/util/IntSetParser.cc	2023-11-07 15:34:43.597507332 +0100
@@ -56,40 +56,36 @@
 
 // -----------------------------------------------------------------------------
 
-/// Function to parse integers (supports commas for separating integers
-//  and integers ranges and dashes for integer ranges).
+/// Function to parse channels (supports commas for separating channels
+//  and channel ranges and dashes for channel ranges).
 //  For example: 1-5, 9, 13-45
 //  Returns a std::set, no need to sort or remove duplicates and find/insert are in log(n)
-//  Supports -1 as [-1] and not [0-1]; other negative integers are not parsed
 
 std::set<int> parseIntSet(const std::string & str) {
-  std::set<int> set_ints;
+  std::set<int> channels;
 
-// split string by commas to get individual integers or ranges
+// split string by commas to get individual channels or ranges
   std::vector<std::string> ranges = splitString(str, ',');
 
-  if (ranges == std::vector<std::string>(1, "-1")) {
-    set_ints.insert(-1);
-  } else {
-    for (std::size_t irange = 0; irange < ranges.size(); irange++) {
-      // split the element by dashes (in case it is a range)
-      std::vector<std::string> range = splitString(ranges[irange], '-');
-      ASSERT((range.size() == 1) || (range.size() == 2));
+  for (std::size_t irange = 0; irange < ranges.size(); irange++) {
+    // split the element by dashes (in case it is a range)
+    std::vector<std::string> range = splitString(ranges[irange], '-');
+    ASSERT((range.size() == 1) || (range.size() == 2));
+    // add a single channel
+    if (range.size() == 1) {
       // add a single channel
-      if (range.size() == 1) {
-        // add a single channel
-        set_ints.insert(stringToChanNum(range[0]));
-      } else if (range.size() == 2) {
-        // add a range
-        int start = stringToChanNum(range[0]);
-        int stop  = stringToChanNum(range[1]);
-        for (int ch = start; ch <= stop; ch++) {
-          set_ints.insert(ch);
-        }
+      channels.insert(stringToChanNum(range[0]));
+    } else if (range.size() == 2) {
+      // add a range
+      int start = stringToChanNum(range[0]);
+      int stop  = stringToChanNum(range[1]);
+      for (int ch = start; ch <= stop; ch++) {
+        channels.insert(ch);
       }
     }
   }
-  return set_ints;
+
+  return channels;
 }
 
 // -----------------------------------------------------------------------------
