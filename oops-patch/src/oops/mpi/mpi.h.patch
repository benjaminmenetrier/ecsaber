--- /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/mpi/mpi.h.tmp	2023-11-09 17:31:28.149939384 +0100
+++ /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/mpi/mpi.h	2023-11-07 15:34:43.597507332 +0100
@@ -272,7 +272,7 @@
 /// \param root root rank for broadcasting
 template <typename VecType>
 void broadcastVector(const eckit::mpi::Comm & comm, std::vector<VecType> & vectorVar,
-                     const size_t root) {
+                     const int root) {
     // eckit broadcast support vectors, but you need to have the vectors identically
     // sized on both sides before doing the broadcast. This routine will broadcast
     // the vector size so the receiving end can resize properly.
@@ -292,13 +292,13 @@
 /// @param comm eckit communicator group
 /// @param boolVar variable for broadcasting
 /// @param root root rank for broadcasting
-void broadcastBool(const eckit::mpi::Comm & comm, bool & boolVar, const size_t root);
+void broadcastBool(const eckit::mpi::Comm & comm, bool & boolVar, const int root);
 
 /// \brief broadcast a string variable via the eckit broadcast
 /// \param comm eckit communicator group
 /// \param stringVar string for broadcasting
 /// \param root root rank for broadcasting
-void broadcastString(const eckit::mpi::Comm & comm, std::string & stringVar, const size_t root);
+void broadcastString(const eckit::mpi::Comm & comm, std::string & stringVar, const int root);
 
 // ------------------------------------------------------------------------------------------------
 // MPI send/receive utilities based on eckit send/receive.
