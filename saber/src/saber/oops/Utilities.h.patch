--- /home/sbbm/code/Harmonie/bundle/ecsaber/saber/src/saber/oops/Utilities.h.tmp.bak	2023-12-19 15:20:59.704434878 +0000
+++ /home/sbbm/code/Harmonie/bundle/ecsaber/saber/src/saber/oops/Utilities.h	2023-12-19 15:04:10.806216456 +0000
@@ -19,15 +19,15 @@
 #include "eckit/config/Configuration.h"
 
 #include "oops/base/FieldSets.h"
-#include "oops/base/Geometry.h"
-#include "oops/base/Increment.h"
-#include "oops/base/IncrementEnsemble.h"
-#include "oops/base/IncrementSet.h"
-#include "oops/base/State4D.h"
-#include "oops/base/StateEnsemble.h"
-#include "oops/base/StateSet.h"
+#include "oops/interface/Geometry.h"
+#include "oops/interface/Increment.h"
+#include "oops/base/Ensemble.h"
+#include "oops/base/EnsemblesCollection.h"
+#include "oops/assimilation/State4D.h"
 #include "oops/base/Variables.h"
 #include "oops/interface/ModelData.h"
+#include "oops/interface/Variables.h"
+#include "oops/util/ConfigFunctions.h"
 #include "oops/util/DateTime.h"
 #include "oops/util/FieldSetHelpers.h"
 #include "oops/util/FieldSetOperations.h"
@@ -37,6 +37,7 @@
 #include "saber/blocks/SaberCentralBlockBase.h"
 #include "saber/blocks/SaberOuterBlockBase.h"
 #include "saber/oops/ErrorCovarianceParameters.h"
+#include "saber/oops/ECUtilities.h"
 
 namespace oops {
   class FieldSet3D;
@@ -51,6 +52,11 @@
 
 // -----------------------------------------------------------------------------
 
+void setMember(eckit::LocalConfiguration & conf,
+               const int & member);
+
+// -----------------------------------------------------------------------------
+
 void setMPI(eckit::LocalConfiguration & conf,
             const int & mpi);
 
@@ -66,12 +72,12 @@
 
 template<typename MODEL>
 oops::FieldSets readEnsemble(const oops::Geometry<MODEL> & geom,
-                                      const oops::patch::Variables & modelvars,
-                                      const oops::State4D<MODEL> & xb,
-                                      const oops::State4D<MODEL> & fg,
-                                      const eckit::LocalConfiguration & inputConf,
-                                      const bool & iterativeEnsembleLoading,
-                                      eckit::LocalConfiguration & outputConf) {
+                             const oops::patch::Variables & modelvars,
+                             const oops::State4D<MODEL> & xb,
+                             const oops::State4D<MODEL> & fg,
+                             const eckit::LocalConfiguration & inputConf,
+                             const bool & iterativeEnsembleLoading,
+                             eckit::LocalConfiguration & outputConf) {
   oops::Log::trace() << "readEnsemble starting" << std::endl;
 
   // Prepare ensemble configuration
@@ -80,46 +86,30 @@
   // Fill output configuration and set ensemble size
   size_t nens = 0;
   size_t ensembleFound = 0;
-  eckit::LocalConfiguration varConf;
 
   // Ensemble of states, perturbation using the mean
-  oops::IncrementEnsembleFromStatesParameters<MODEL> ensembleParams;
-  eckit::LocalConfiguration ensembleConf;
+  std::vector<eckit::LocalConfiguration> ensembleConf;
   if (inputConf.has("ensemble")) {
-    ensembleConf = inputConf.getSubConfiguration("ensemble");
-    ensembleParams.deserialize(ensembleConf);
-    nens = ensembleParams.states.size();
+    if (util::isVector(inputConf.getSubConfiguration("ensemble"))) {
+      ensembleConf = inputConf.getSubConfigurations("ensemble");
+    } else {
+      ensembleConf.push_back(inputConf.getSubConfiguration("ensemble"));
+    }
+    nens = ensembleConf[0].getInt("members");
     outputConf.set("ensemble", ensembleConf);
-    varConf = ensembleParams.states.getStateConfig(0, 0);
     ++ensembleFound;
   }
 
   // Increment ensemble from increments on disk
-  oops::IncrementEnsembleParameters<MODEL> ensemblePertParams;
-  eckit::LocalConfiguration ensemblePert;
+  std::vector<eckit::LocalConfiguration> ensemblePert;
   if (inputConf.has("ensemble pert")) {
-    ensemblePert = inputConf.getSubConfiguration("ensemble pert");
-    ensemblePertParams.deserialize(ensemblePert);
-    nens = ensemblePertParams.size();
-    outputConf.set("ensemble pert", ensemblePert);
-    ensemblePertParams.getIncrementParameters(0).serialize(varConf);
-    ++ensembleFound;
-  }
-
-  // Increment ensemble from difference of two states
-  oops::StateEnsembleParameters<MODEL> ensembleBaseParams;
-  oops::StateEnsembleParameters<MODEL> ensemblePairsParams;
-  eckit::LocalConfiguration ensembleBase;
-  eckit::LocalConfiguration ensemblePairs;
-  if (inputConf.has("ensemble base") && inputConf.has("ensemble pairs")) {
-    ensembleBase = inputConf.getSubConfiguration("ensemble base");
-    ensemblePairs = inputConf.getSubConfiguration("ensemble pairs");
-    ensembleBaseParams.deserialize(ensembleBase);
-    ensemblePairsParams.deserialize(ensemblePairs);
-    nens = ensembleBaseParams.size();
-    varConf = ensembleBaseParams.getStateConfig(0, 0);
-    outputConf.set("ensemble base", ensembleBase);
-    outputConf.set("ensemble pairs", ensemblePairs);
+    if (util::isVector(inputConf.getSubConfiguration("ensemble pert"))) {
+      ensemblePert = inputConf.getSubConfigurations("ensemble pert");
+    } else {
+      ensemblePert.push_back(inputConf.getSubConfiguration("ensemble pert"));
+    }
+    nens = ensemblePert[0].getInt("members");
+    outputConf.set("ensemble", ensemblePert);
     ++ensembleFound;
   }
 
@@ -129,52 +119,54 @@
   // Check number of ensembles in yaml
   ASSERT(ensembleFound <= 1);
 
-  oops::patch::Variables vars(varConf.has("variables") ?
-    oops::patch::Variables{varConf.getStringVector("variables")} :
-    modelvars);
-
   if (!iterativeEnsembleLoading) {
     // Full ensemble loading
     oops::Log::info() << "Info     : Read full ensemble" << std::endl;
 
     // Ensemble of states, perturbation using the mean
-    if (!ensembleConf.empty()) {
+    if (ensembleConf.size() > 0) {
       oops::Log::info() << "Info     : Ensemble of states, perturbation using the mean"
                         << std::endl;
-      oops::StateSet<MODEL> tmp(geom, ensembleParams.toConfiguration(), xb.commTime());
-      oops::IncrementSet<MODEL> ensemble(geom, vars, tmp, true);
-      ensemble -= ensemble.ens_mean();
-      oops::FieldSets fsetEns(ensemble);
-      return fsetEns;
+
+      for (unsigned jsub = 0; jsub < xb.times().size(); ++jsub) {
+        boost::shared_ptr<oops::Ensemble<MODEL>> ens_k(new oops::Ensemble<MODEL>(xb[jsub].validTime(),
+          ensembleConf[jsub]));
+        ens_k->linearize(xb[jsub], geom);
+        for (size_t ie = 0; ie < nens; ++ie) {
+          (*ens_k)[ie] *= std::sqrt(static_cast<double>(nens-1));
+        }
+        oops::EnsemblesCollection<MODEL>::getInstance().put(xb[jsub].validTime(), ens_k);
+      }
     }
 
     // Increment ensemble from increments on disk
-    if (!ensemblePert.empty()) {
+    if (ensemblePert.size() > 0) {
       oops::Log::info() << "Info     : Increment ensemble from increments on disk" << std::endl;
-      oops::IncrementSet<MODEL> ensemble(geom, vars, xb.times(),
-                                         ensemblePertParams.toConfiguration(), xb.commTime());
-      oops::FieldSets fsetEns(ensemble);
-      return fsetEns;
+
+      for (unsigned jsub = 0; jsub < xb.times().size(); ++jsub) {
+        boost::shared_ptr<oops::Ensemble<MODEL>> ens_k(new oops::Ensemble<MODEL>(xb[jsub].validTime(),
+          ensemblePert[jsub]));
+        ens_k->build(xb[jsub], geom);
+        ens_k->read();
+        oops::EnsemblesCollection<MODEL>::getInstance().put(xb[jsub].validTime(), ens_k);
+      }
     }
 
-    // Increment ensemble from difference of two states
-    if (!ensembleBase.empty() && !ensemblePairs.empty()) {
-      oops::Log::info() << "Info     : Increment ensemble from difference of two states"
-                        << std::endl;
-      oops::StateSet<MODEL> states1(geom, ensembleBaseParams.toConfiguration(), xb.commTime());
-      oops::StateSet<MODEL> states2(geom, ensemblePairsParams.toConfiguration(), xb.commTime());
-      oops::IncrementSet<MODEL> ensemble(geom, vars, states1.times(), states1.commTime(),
-                                         states1.members(), states1.commEns());
-      ensemble.diff(states1, states2);
-      oops::FieldSets fsetEns(ensemble);
+    if (ensembleConf.size() > 0 || ensemblePert.size() > 0) {
+      // Transform Ensemble into FieldSets
+      oops::Log::info() << "Info     : Transform Ensemble into FieldSets" << std::endl;
+      std::vector<int> ensmems(nens);
+      std::iota(ensmems.begin(), ensmems.end(), 0);
+      oops::FieldSets fsetEns(xb, ensmems);
       return fsetEns;
     }
   }
+
   // Return empty ensemble if none was returned before
   std::vector<util::DateTime> dates;
   std::vector<int> ensmems;
-  oops::FieldSets ensemble(dates, xb.commTime(), ensmems, xb.commEns());
-  return ensemble;
+  oops::FieldSets fsetEns(dates, eckit::mpi::self(), ensmems, eckit::mpi::self());
+  return fsetEns;
 }
 
 // -------------------------------------------------------------------------------------------------
@@ -192,14 +184,17 @@
   // Local copy
   eckit::LocalConfiguration localConf(conf);
 
+  // Create variables
+  oops::Variables<MODEL> varsT(templatedVarsConf(vars));
+
   // Create Increment
-  oops::Increment<MODEL> dx(geom, vars, date);
+  oops::Increment<MODEL> dx(geom, varsT, date);
 
   // Read file
   dx.read(localConf);
 
   // Get FieldSet
-  fset.shallowCopy(dx.fieldSet());
+  fset.shallowCopy(dx.increment().fieldSet());
 
   oops::Log::trace() << "readHybridWeight done" << std::endl;
 }
@@ -219,54 +214,42 @@
   // Fill FieldSet
   size_t ensembleFound = 0;
 
-  const size_t myrank = geom.timeComm().rank();
-
   if (conf.has("ensemble")) {
     // Ensemble of states passed as increments
-    oops::StateEnsembleParameters<MODEL> states;
-    states.deserialize(conf.getSubConfiguration("ensemble"));
-
-    // Read state
-    oops::State<MODEL> xx(geom, states.getStateConfig(ie, myrank));
+    std::vector<eckit::LocalConfiguration> ensembleConf = 
+      conf.getSubConfigurations("ensemble");
+    std::vector<eckit::LocalConfiguration> membersConf =
+      ensembleConf[0].getSubConfigurations("state");
+
+    // Create variables
+    oops::Variables<MODEL> varsT(templatedVarsConf(vars));
+
+    // Read state as increment
+    oops::Increment<MODEL> dx(geom, varsT, fset.validTime());
+    dx.read(membersConf[ie]);
 
     // Copy FieldSet
-    fset.deepCopy(xx.fieldSet());
+    fset.deepCopy(dx.increment().fieldSet());
 
     ++ensembleFound;
   }
 
   if (conf.has("ensemble pert")) {
-    // Increment ensemble from increments on disk
-    oops::IncrementEnsembleParameters<MODEL> ensemblePertParams;
-    ensemblePertParams.deserialize(conf.getSubConfiguration("ensemble pert"));
-
-    // Read Increment
-    oops::Increment<MODEL> dx(geom, vars, fset.validTime());
-    dx.read(ensemblePertParams.getIncrementParameters(ie));
+    // Increment ensemble from difference of two states
+    std::vector<eckit::LocalConfiguration> ensembleConf
+      = conf.getSubConfigurations("ensemble pert");
+    std::vector<eckit::LocalConfiguration> membersConf =
+      ensembleConf[0].getSubConfigurations("state");
 
-    // Get FieldSet
-    fset.deepCopy(dx.fieldSet());
+    // Create variables
+    oops::Variables<MODEL> varsT(templatedVarsConf(vars));
 
-    ++ensembleFound;
-  }
-
-  if (conf.has("ensemble base") && conf.has("ensemble pairs")) {
-    // Increment ensemble from difference of two states
-    oops::StateEnsembleParameters<MODEL> ensembleBaseParams;
-    ensembleBaseParams.deserialize(conf.getSubConfiguration("ensemble base"));
-    oops::StateEnsembleParameters<MODEL> ensemblePairsParams;
-    ensemblePairsParams.deserialize(conf.getSubConfiguration("ensemble pairs"));
-
-    // Read states
-    oops::State<MODEL> xxBase(geom, ensembleBaseParams.getStateConfig(ie, myrank));
-    oops::State<MODEL> xxPairs(geom, ensemblePairsParams.getStateConfig(ie, myrank));
-
-    // Compute difference
-    oops::Increment<MODEL> dx(geom, vars, fset.validTime());
-    dx.diff(xxPairs, xxBase);
+    // Read Increment
+    oops::Increment<MODEL> dx(geom, varsT, fset.validTime());
+    dx.read(membersConf[ie]);
 
     // Get FieldSet
-    fset.deepCopy(dx.fieldSet());
+    fset.deepCopy(dx.increment().fieldSet());
 
     ++ensembleFound;
   }
