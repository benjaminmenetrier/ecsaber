--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ErrorCovariance.h.tmp.bak	2023-11-20 18:49:11.627353712 +0100
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ErrorCovariance.h	2023-11-20 18:40:05.618476334 +0100
@@ -13,20 +13,17 @@
 
 #include "atlas/field.h"
 
-#include "oops/base/Geometry.h"
-#include "oops/base/GeometryData.h"
-#include "oops/base/Increment.h"
-#include "oops/base/Increment4D.h"
+#include "eckit/config/LocalConfiguration.h"
+#include "eckit/exception/Exceptions.h"
+
+#include "oops/assimilation/IncrCtlVec.h"
+#include "oops/assimilation/Increment4D.h"
+#include "oops/assimilation/State4D.h"
 #include "oops/base/ModelSpaceCovarianceBase.h"
-#include "oops/base/State.h"
-#include "oops/base/State4D.h"
-#include "oops/base/Variables.h"
-#include "oops/util/FieldSetHelpers.h"
-#include "oops/util/FieldSetOperations.h"
-#include "oops/util/Logger.h"
-#include "oops/util/ObjectCounter.h"
-#include "oops/util/Printable.h"
-#include "oops/util/Timer.h"
+#include "oops/interface/Geometry.h"
+#include "oops/interface/Increment.h"
+#include "oops/interface/State.h"
+#include "oops/interface/Variables.h"
 
 #include "saber/blocks/SaberBlockChainBase.h"
 #include "saber/blocks/SaberBlockParametersBase.h"
@@ -36,6 +33,9 @@
 #include "saber/oops/ErrorCovarianceParameters.h"
 #include "saber/oops/Utilities.h"
 
+#include "util/abor1_cpp.h"
+#include "util/Logger.h"
+
 namespace saber {
 
 // -----------------------------------------------------------------------------
@@ -50,33 +50,49 @@
 // -----------------------------------------------------------------------------
 
 template <typename MODEL>
-class ErrorCovariance : public oops::ModelSpaceCovarianceBase<MODEL>,
-                        public util::Printable,
-                        private util::ObjectCounter<ErrorCovariance<MODEL>> {
-  typedef oops::Geometry<MODEL>                                Geometry_;
-  typedef oops::Increment<MODEL>                               Increment_;
-  typedef oops::Increment4D<MODEL>                             Increment4D_;
-  typedef oops::State4D<MODEL>                                 State4D_;
+class ErrorCovariance : public oops::ModelSpaceCovarianceBase<MODEL> {
+  using Geometry_ = oops::Geometry<MODEL>;
+  using Increment_ = oops::Increment<MODEL>;
+  using Increment4D_ = oops::Increment4D<MODEL>;
+  using IncrCtlVec_ = oops::IncrCtlVec<MODEL>;
+  using IncrEnsCtlVec_ = oops::IncrEnsCtlVec<MODEL>;
+  using IncrModCtlVec_ = oops::IncrModCtlVec<MODEL>;
+  using State_ = oops::State<MODEL>;
+  using State4D_ = oops::State4D<MODEL>;
+  using Variables_ = oops::Variables<MODEL>;
 
  public:
-  static const std::string classname() {return "saber::ErrorCovariance";}
+  typedef ErrorCovarianceParameters<MODEL> Parameters_;
 
-  ErrorCovariance(const Geometry_ &, const oops::patch::Variables &,
-                  const eckit::Configuration &,
-                  const State4D_ &, const State4D_ &);
-  virtual ~ErrorCovariance();
+  static const std::string classname() {return "saber::ErrorCovariance";}
 
-  void multiply(const Increment4D_ & dxi, Increment4D_ & dxo) const {this->doMultiply(dxi, dxo);}
+  ErrorCovariance(const Geometry_ &, const Variables_ &, const eckit::Configuration &,
+                  const State_ &);
+  ~ErrorCovariance();
+
+  // Methods
+  void linearize(const State_ &, const Geometry_ &, const eckit::Configuration &) override;
+  void multiply(const Increment_ &, Increment_ &) const override;
+  void inverseMultiply(const Increment_ &, Increment_ &) const override;
+  void multiplySqrt(const IncrCtlVec_ &, Increment_ &) const override;
+  void multiplySqrtTrans(const Increment_ &, IncrCtlVec_ &) const override;
+  void randomize(Increment_ &) const override;
+
+  // Control Vector
+  IncrModCtlVec_ *newIncrModCtlVec() const override {
+    return new IncrModCtlVec_(this->ctlVecSize());
+  }
+  IncrEnsCtlVec_ *newIncrEnsCtlVec() const override {
+    return new IncrEnsCtlVec_();
+  }
 
  private:
   ErrorCovariance(const ErrorCovariance&);
   ErrorCovariance& operator=(const ErrorCovariance&);
 
-  void doRandomize(Increment4D_ &) const override;
-  void doMultiply(const Increment4D_ &, Increment4D_ &) const override;
-  void doInverseMultiply(const Increment4D_ &, Increment4D_ &) const override;
+  size_t ctlVecSize() const;
 
-  void print(std::ostream &) const override;
+  void print(std::ostream &) const;
 
   /// Chain of outer blocks applied to all components of hybrid covariances.
   /// Not initialized for non-hybrid covariances.
@@ -95,15 +111,19 @@
 
 template<typename MODEL>
 ErrorCovariance<MODEL>::ErrorCovariance(const Geometry_ & geom,
-                                        const oops::patch::Variables & incVars,
+                                        const Variables_ & incVars,
                                         const eckit::Configuration & config,
-                                        const State4D_ & xb,
-                                        const State4D_ & fg)
-  : oops::ModelSpaceCovarianceBase<MODEL>(geom, config, xb, fg)
+                                        const State_ & xb3D)
+  : oops::ModelSpaceCovarianceBase<MODEL>(config)
 {
   oops::Log::trace() << "ErrorCovariance::ErrorCovariance starting" << std::endl;
-  ErrorCovarianceParameters<MODEL> params;
-  params.deserialize(config);
+
+  // JEDI compatibility
+  State4D_ xb;
+  xb.push_back(xb3D);
+  State4D_ fg(xb);
+  Parameters_ params;
+  params.validateAndDeserialize(config);
 
   // Local copy of background and first guess that can undergo interpolation
   const oops::FieldSet4D fset4dXbTmp(xb);
@@ -116,8 +136,8 @@
   // TODO(Benjamin, Marek, Mayeul, ?)
 
   // Initialize outer variables
-  const std::vector<std::size_t> vlevs = geom.variableSizes(incVars);
-  oops::patch::Variables outerVars(incVars);
+  const std::vector<std::size_t> vlevs = geom.geometry().variableSizes(incVars.variables());
+  oops::patch::Variables outerVars(incVars.variables().variablesList());
   for (std::size_t i = 0; i < vlevs.size() ; ++i) {
     outerVars.addMetaData(outerVars[i], "levels", vlevs[i]);
   }
@@ -155,9 +175,7 @@
     const auto & dualResGeomConf = dualResParams->geometry.value();
     if (dualResGeomConf != boost::none) {
       // Create dualRes geometry
-      typename Geometry_::Parameters_ dualResGeomParams;
-      dualResGeomParams.deserialize(*dualResGeomConf);
-      dualResGeom = new Geometry_(dualResGeomParams, geom.getComm());
+      dualResGeom = new Geometry_(*dualResGeomConf);
     }
     // Background and first guess at dual resolution geometry
     oops::State<MODEL> xbDualRes(*dualResGeom, xb[0]);
@@ -205,8 +223,7 @@
     // Create block geometry (needed for ensemble reading)
     const Geometry_ * hybridGeom = &geom;
     if (hybridConf.has("geometry")) {
-      hybridGeom = new Geometry_(hybridConf.getSubConfiguration("geometry"),
-        geom.getComm());
+      hybridGeom = new Geometry_(hybridConf.getSubConfiguration("geometry"));
     }
 
     // Loop over components
@@ -314,16 +331,43 @@
 
 // -----------------------------------------------------------------------------
 
+template <typename MODEL>
+void ErrorCovariance<MODEL>::linearize(const State_ &,
+                                       const Geometry_ &,
+                                       const eckit::Configuration &) {
+  oops::Log::trace() << "ErrorCovariance linearized." << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
 template<typename MODEL>
-void ErrorCovariance<MODEL>::doRandomize(Increment4D_ & dx) const {
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doRandomize starting" << std::endl;
-  util::Timer timer(classname(), "doRandomize");
+size_t ErrorCovariance<MODEL>::ctlVecSize() const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::ctlVecSize starting" << std::endl;
+
+  size_t ctlVecSize = 0;
+  for (size_t jj = 0; jj < hybridBlockChain_.size(); ++jj) {
+    // Add component
+    ctlVecSize += hybridBlockChain_[jj]->ctlVecSize();
+  }
+  oops::Log::trace() << "ErrorCovariance<MODEL>::ctlVecSize done" << std::endl;
+  return ctlVecSize;
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename MODEL>
+void ErrorCovariance<MODEL>::randomize(Increment_ & dx3d) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::randomize starting" << std::endl;
+  util::Timer timer(classname(), "randomize");
+
+  // JEDI compatibility
+  Increment4D_ dx(dx3d.geometry(), dx3d.variables(), {dx3d.validTime()});
 
   // Create FieldSet4D, set to zero
   atlas::FieldSet fset = util::createFieldSet(hybridBlockChain_[0]->outerFunctionSpace(),
                                               hybridBlockChain_[0]->outerVariables(),
                                               0.0);
-  oops::FieldSet4D fset4dSum(dx.times(), dx.commTime(), dx.geometry().getComm());
+  oops::FieldSet4D fset4dSum(dx.times(), oops::mpi::myself(), eckit::mpi::comm());
   for (size_t jtime = 0; jtime < fset4dSum.size(); ++jtime) {
     fset4dSum[jtime].fieldSet() = util::copyFieldSet(fset);
   }
@@ -331,7 +375,7 @@
   // Loop over components for the central block
   for (size_t jj = 0; jj < hybridBlockChain_.size(); ++jj) {
     // Randomize covariance
-    oops::FieldSet4D fset4dCmp(dx.times(), dx.commTime(), dx.geometry().getComm());
+    oops::FieldSet4D fset4dCmp(dx.times(), oops::mpi::myself(), eckit::mpi::comm());
     hybridBlockChain_[jj]->randomize(fset4dCmp);
 
     // Weight square-root multiplication
@@ -351,20 +395,28 @@
   if (outerBlockChain_) outerBlockChain_->applyOuterBlocks(fset4dSum);
 
   // ATLAS fieldset to Increment_
-  for (size_t jtime = 0; jtime < dx.size(); ++jtime) {
-    dx[jtime].fromFieldSet(fset4dSum[jtime].fieldSet());
+  for (int jtime = dx.first(); jtime <= dx.last(); ++jtime) {
+    util::copyFieldSet(fset4dSum[jtime].fieldSet(), dx[jtime].increment().fieldSet());
+    dx[jtime].increment().synchronizeFields();
   }
 
+  // JEDI compatibility
+  dx3d = dx[0];
+
   oops::Log::trace() << "ErrorCovariance<MODEL>::doRandomize done" << std::endl;
 }
 
 // -----------------------------------------------------------------------------
 
-template<typename MODEL>
-void ErrorCovariance<MODEL>::doMultiply(const Increment4D_ & dxi,
-                                        Increment4D_ & dxo) const {
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doMultiply starting" << std::endl;
-  util::Timer timer(classname(), "doMultiply");
+template <typename MODEL>
+void ErrorCovariance<MODEL>::multiply(const Increment_ &dx3di, Increment_ &dx3do) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiply starting" << std::endl;
+  util::Timer timer(classname(), "multiply");
+
+  // JEDI compatibility
+  Increment4D_ dxi(dx3di.geometry(), dx3di.variables(), {dx3di.validTime()});
+  Increment4D_ dxo(dx3do.geometry(), dx3do.variables(), {dx3do.validTime()});
+  dxi[0] = dx3di;
 
   // Copy input
   dxo = dxi;
@@ -413,26 +465,126 @@
   if (outerBlockChain_) outerBlockChain_->applyOuterBlocks(fset4dSum);
 
   // ATLAS fieldset to Increment_
-  for (size_t jtime = 0; jtime < dxo.size(); ++jtime) {
-    dxo[jtime].fromFieldSet(fset4dSum[jtime].fieldSet());
+  for (int jtime = dxo.first(); jtime <= dxo.last(); ++jtime) {
+    util::copyFieldSet(fset4dSum[jtime].fieldSet(), dxo[jtime].increment().fieldSet());
+    dxo[jtime].increment().synchronizeFields();
   }
 
+  // JEDI compatibility
+  dx3do = dxo[0];
+
   oops::Log::trace() << "ErrorCovariance<MODEL>::doMultiply done" << std::endl;
 }
 
 // -----------------------------------------------------------------------------
 
-template<typename MODEL>
-void ErrorCovariance<MODEL>::doInverseMultiply(const Increment4D_ & dxi, Increment4D_ & dxo) const {
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doInverseMultiply starting" << std::endl;
-  util::Timer timer(classname(), "doInverseMultiply");
+template <typename MODEL>
+void ErrorCovariance<MODEL>::inverseMultiply(const Increment_ &dxi, Increment_ &dxo) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::inverseMultiply starting" << std::endl;
+  util::Timer timer(classname(), "inverseMultiply");
 
   // Iterative inverse
-  oops::IdentityMatrix<Increment4D_> Id;
+  oops::IdentityMatrix<Increment_> Id;
   dxo.zero();
   GMRESR(dxo, dxi, *this, Id, 10, 1.0e-3);
 
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doInverseMultiply done" << std::endl;
+  oops::Log::trace() << "ErrorCovariance<MODEL>::inverseMultiply done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance<MODEL>::multiplySqrt(const IncrCtlVec_ &dv,
+                                          Increment_ &dx3d) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrt starting" << std::endl;
+
+  // JEDI compatibility
+  Increment4D_ dx(dx3d.geometry(), dx3d.variables(), {dx3d.validTime()});
+
+  // Loop over components for the central block
+  size_t offset = 0;
+  oops::FieldSet4D fset4dSum(dx.times(), oops::mpi::myself(), eckit::mpi::comm());
+  for (size_t jj = 0; jj < hybridBlockChain_.size(); ++jj) {
+    // Apply covariance square-root
+    oops::FieldSet4D fset4dCmp(dx.times(), oops::mpi::myself(), eckit::mpi::comm());
+    hybridBlockChain_[jj]->multiplySqrt(dv.modCtlVec().genCtlVec().data(), fset4dCmp, offset);
+    offset += hybridBlockChain_[jj]->ctlVecSize();
+
+    // Apply weight
+    if (hybridScalarWeightSqrt_[jj] != 1.0) {
+      // Scalar weight
+      fset4dCmp *= hybridScalarWeightSqrt_[jj];
+    }
+    if (!hybridFieldWeightSqrt_[jj].empty()) {
+      // File-based weight
+      fset4dCmp *= hybridFieldWeightSqrt_[jj];
+    }
+
+    if (jj == 0) {
+      // Initialize sum
+      for (size_t jtime = 0; jtime < fset4dSum.size(); ++jtime) {
+        fset4dSum[jtime].fieldSet() = util::copyFieldSet(fset4dCmp[jtime].fieldSet());
+      }
+    } else {
+      // Add component
+      fset4dSum += fset4dCmp;
+    }
+  }
+
+  // Apply outer blocks forward
+  if (outerBlockChain_) outerBlockChain_->applyOuterBlocks(fset4dSum);
+
+  // ATLAS fieldset to Increment_
+  for (int jtime = dx.first(); jtime <= dx.last(); ++jtime) {
+    util::copyFieldSet(fset4dSum[jtime].fieldSet(), dx[jtime].increment().fieldSet());
+    dx[jtime].increment().synchronizeFields();
+  }
+
+  // JEDI compatibility
+  dx3d = dx[0];
+
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrt done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance<MODEL>::multiplySqrtTrans(const Increment_ &dx3d,
+                                               IncrCtlVec_ &dv) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrtTrans starting" << std::endl;
+
+  // JEDI compatibility
+  Increment4D_ dx(dx3d.geometry(), dx3d.variables(), {dx3d.validTime()});
+  dx[0] = dx3d;
+
+  // Create input FieldSet
+  oops::FieldSet4D fset4dInit(dx);
+
+  // Apply outer blocks adjoint
+  if (outerBlockChain_) outerBlockChain_->applyOuterBlocksAD(fset4dInit);
+
+  // Loop over B components
+  size_t offset = 0;
+  for (size_t jj = 0; jj < hybridBlockChain_.size(); ++jj) {
+    // Create temporary FieldSet
+    oops::FieldSet4D fset4dCmp = oops::copyFieldSet4D(fset4dInit);
+
+    // Apply weight
+    if (hybridScalarWeightSqrt_[jj] != 1.0) {
+      // Scalar weight
+      fset4dCmp *= hybridScalarWeightSqrt_[jj];
+    }
+    if (!hybridFieldWeightSqrt_[jj].empty()) {
+      // File-based weight
+      fset4dCmp *= hybridFieldWeightSqrt_[jj];
+    }
+
+    // Apply covariance square-root adjoint
+    hybridBlockChain_[jj]->multiplySqrtAD(fset4dCmp, dv.modCtlVec().genCtlVec().data(), offset);
+    offset += hybridBlockChain_[jj]->ctlVecSize();
+  }
+
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrtTrans done" << std::endl;
 }
 
 // -----------------------------------------------------------------------------
