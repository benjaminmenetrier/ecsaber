--- /home/sbbm/code/Harmonie/bundle/ecsaber/saber/src/saber/oops/ErrorCovariance.h.tmp.bak	2023-12-19 15:20:59.170511778 +0000
+++ /home/sbbm/code/Harmonie/bundle/ecsaber/saber/src/saber/oops/ErrorCovariance.h	2023-12-19 15:13:25.326673507 +0000
@@ -13,20 +13,18 @@
 
 #include "atlas/field.h"
 
-#include "oops/base/Geometry.h"
-#include "oops/base/GeometryData.h"
-#include "oops/base/Increment.h"
-#include "oops/base/Increment4D.h"
+#include "eckit/config/LocalConfiguration.h"
+#include "eckit/exception/Exceptions.h"
+
+#include "oops/assimilation/IncrCtlVec.h"
+#include "oops/assimilation/Increment4D.h"
+#include "oops/assimilation/State4D.h"
 #include "oops/base/ModelSpaceCovarianceBase.h"
-#include "oops/base/State.h"
-#include "oops/base/State4D.h"
-#include "oops/base/Variables.h"
-#include "oops/util/FieldSetHelpers.h"
-#include "oops/util/FieldSetOperations.h"
-#include "oops/util/Logger.h"
-#include "oops/util/ObjectCounter.h"
-#include "oops/util/Printable.h"
-#include "oops/util/Timer.h"
+#include "oops/base/ModelSpaceCovariance4DBase.h"
+#include "oops/interface/Geometry.h"
+#include "oops/interface/Increment.h"
+#include "oops/interface/State.h"
+#include "oops/interface/Variables.h"
 
 #include "saber/blocks/SaberBlockChainBase.h"
 #include "saber/blocks/SaberBlockParametersBase.h"
@@ -36,6 +34,9 @@
 #include "saber/oops/ErrorCovarianceParameters.h"
 #include "saber/oops/Utilities.h"
 
+#include "util/abor1_cpp.h"
+#include "util/Logger.h"
+
 namespace saber {
 
 // -----------------------------------------------------------------------------
@@ -50,33 +51,35 @@
 // -----------------------------------------------------------------------------
 
 template <typename MODEL>
-class ErrorCovariance : public oops::ModelSpaceCovarianceBase<MODEL>,
-                        public util::Printable,
-                        private util::ObjectCounter<ErrorCovariance<MODEL>> {
-  typedef oops::Geometry<MODEL>                                Geometry_;
-  typedef oops::Increment<MODEL>                               Increment_;
-  typedef oops::Increment4D<MODEL>                             Increment4D_;
-  typedef oops::State4D<MODEL>                                 State4D_;
+class ErrorCovariance4D : public oops::ModelSpaceCovariance4DBase<MODEL> {
+  using Geometry_ = oops::Geometry<MODEL>;
+  using Increment4D_ = oops::Increment4D<MODEL>;
+  using IncrCtlVec_ = oops::IncrCtlVec<MODEL>;
+  using IncrEnsCtlVec_ = oops::IncrEnsCtlVec<MODEL>;
+  using IncrModCtlVec_ = oops::IncrModCtlVec<MODEL>;
+  using State4D_ = oops::State4D<MODEL>;
+  using Variables_ = oops::Variables<MODEL>;
 
  public:
-  static const std::string classname() {return "saber::ErrorCovariance";}
-
-  ErrorCovariance(const Geometry_ &, const oops::patch::Variables &,
-                  const eckit::Configuration &,
-                  const State4D_ &, const State4D_ &);
-  virtual ~ErrorCovariance();
+  typedef ErrorCovarianceParameters<MODEL> Parameters_;
 
-  void multiply(const Increment4D_ & dxi, Increment4D_ & dxo) const {this->doMultiply(dxi, dxo);}
+  static const std::string classname() {return "saber::ErrorCovariance4D";}
 
- private:
-  ErrorCovariance(const ErrorCovariance&);
-  ErrorCovariance& operator=(const ErrorCovariance&);
+  ErrorCovariance4D(const Geometry_ &, const Variables_ &, const eckit::Configuration &,
+                    const State4D_ &);
+  ~ErrorCovariance4D();
+
+  // Methods
+  void advectedLinearize(const State4D_ &,const Geometry_ &) override;
+  void advectedMultiply(const Increment4D_ &, Increment4D_ &) const override;
+  void advectedInverseMultiply(const Increment4D_ &, Increment4D_ &) const override;
+  void randomize(Increment4D_ &) const override;
+  const oops::ModelSpaceCovarianceBase<MODEL> &covar() const { return *static_; }
 
-  void doRandomize(Increment4D_ &) const override;
-  void doMultiply(const Increment4D_ &, Increment4D_ &) const override;
-  void doInverseMultiply(const Increment4D_ &, Increment4D_ &) const override;
+  size_t ctlVecSize() const;
 
-  void print(std::ostream &) const override;
+ private:
+  void print(std::ostream &) const;
 
   /// Chain of outer blocks applied to all components of hybrid covariances.
   /// Not initialized for non-hybrid covariances.
@@ -89,21 +92,26 @@
   /// Vector of field weights for hybrid B components (one element, empty
   /// fieldset for non-hybrid case).
   std::vector<oops::FieldSet3D> hybridFieldWeightSqrt_;
+  /// Dummy static covariance
+  std::unique_ptr<oops::ModelSpaceCovarianceBase<MODEL>> static_;
 };
 
 // -----------------------------------------------------------------------------
 
 template<typename MODEL>
-ErrorCovariance<MODEL>::ErrorCovariance(const Geometry_ & geom,
-                                        const oops::patch::Variables & incVars,
-                                        const eckit::Configuration & config,
-                                        const State4D_ & xb,
-                                        const State4D_ & fg)
-  : oops::ModelSpaceCovarianceBase<MODEL>(geom, config, xb, fg)
+ErrorCovariance4D<MODEL>::ErrorCovariance4D(const Geometry_ & geom,
+                                            const Variables_ & incVars,
+                                            const eckit::Configuration & config,
+                                            const State4D_ & xb)
+  : oops::ModelSpaceCovariance4DBase<MODEL>::ModelSpaceCovariance4DBase(geom, config),
+    static_() 
 {
-  oops::Log::trace() << "ErrorCovariance::ErrorCovariance starting" << std::endl;
-  ErrorCovarianceParameters<MODEL> params;
-  params.deserialize(config);
+  oops::Log::trace() << "ErrorCovariance4D::ErrorCovariance4D starting" << std::endl;
+
+  // JEDI compatibility
+  State4D_ fg(xb);
+  Parameters_ params;
+  params.validateAndDeserialize(config);
 
   // Local copy of background and first guess that can undergo interpolation
   const oops::FieldSet4D fset4dXbTmp(xb);
@@ -116,8 +124,8 @@
   // TODO(Benjamin, Marek, Mayeul, ?)
 
   // Initialize outer variables
-  const std::vector<std::size_t> vlevs = geom.variableSizes(incVars);
-  oops::patch::Variables outerVars(incVars);
+  const std::vector<std::size_t> vlevs = geom.geometry().variableSizes(incVars.variables());
+  oops::patch::Variables outerVars(incVars.variables().variablesList());
   for (std::size_t i = 0; i < vlevs.size() ; ++i) {
     outerVars.addMetaData(outerVars[i], "levels", vlevs[i]);
   }
@@ -155,13 +163,11 @@
     const auto & dualResGeomConf = dualResParams->geometry.value();
     if (dualResGeomConf != boost::none) {
       // Create dualRes geometry
-      typename Geometry_::Parameters_ dualResGeomParams;
-      dualResGeomParams.deserialize(*dualResGeomConf);
-      dualResGeom = new Geometry_(dualResGeomParams, geom.getComm());
+      dualResGeom = new Geometry_(*dualResGeomConf);
     }
     // Background and first guess at dual resolution geometry
-    const State4D_ xbDualRes(*dualResGeom, xb);
-    const State4D_ fgDualRes(*dualResGeom, fg);
+    const State4D_ xbDualRes(xb);  // Dual-res not ready in CY46h1
+    const State4D_ fgDualRes(fg);  // Dual-res not ready in CY46h1
     // Read dual resolution ensemble
     eckit::LocalConfiguration dualResEnsembleConf;
     fsetDualResEns = std::make_unique<oops::FieldSets>(readEnsemble(*dualResGeom,
@@ -178,7 +184,7 @@
     std::vector<util::DateTime> dates;
     std::vector<int> ensmems;
     fsetDualResEns = std::make_unique<oops::FieldSets>(dates,
-                                      xb.commTime(), ensmems, xb.commEns());
+                                      eckit::mpi::self(), ensmems, eckit::mpi::comm());
   }
 
   // Add ensemble output
@@ -210,8 +216,7 @@
     // Create block geometry (needed for ensemble reading)
     const Geometry_ * hybridGeom = &geom;
     if (hybridConf.has("geometry")) {
-      hybridGeom = new Geometry_(hybridConf.getSubConfiguration("geometry"),
-        geom.getComm());
+      hybridGeom = new Geometry_(hybridConf.getSubConfiguration("geometry"));
     }
 
     // Loop over components
@@ -225,7 +230,7 @@
       // Scalar weight
       hybridScalarWeightSqrt_.push_back(std::sqrt(weightConf.getDouble("value", 1.0)));
       // File-base weight
-      oops::FieldSet3D fsetWeight(xb[0].validTime(), geom.getComm());
+      oops::FieldSet3D fsetWeight(xb[0].validTime(), eckit::mpi::comm());
       if (weightConf.has("file")) {
         // File-base weight
         readHybridWeight(*hybridGeom,
@@ -300,31 +305,54 @@
     // Set weights
     hybridScalarWeightSqrt_.push_back(1.0);
     // File-base weight
-    oops::FieldSet3D fsetWeight(xb[0].validTime(), geom.getComm());
+    oops::FieldSet3D fsetWeight(xb[0].validTime(), eckit::mpi::comm());
     hybridFieldWeightSqrt_.push_back(fsetWeight);
   }
 
-  oops::Log::trace() << "ErrorCovariance::ErrorCovariance done" << std::endl;
+  oops::Log::trace() << "ErrorCovariance4D::ErrorCovariance4D done" << std::endl;
 }
 
 // -----------------------------------------------------------------------------
 
 template<typename MODEL>
-ErrorCovariance<MODEL>::~ErrorCovariance() {
-  oops::Log::trace() << "ErrorCovariance<MODEL>::~ErrorCovariance starting" << std::endl;
-  util::Timer timer(classname(), "~ErrorCovariance");
-  oops::Log::trace() << "ErrorCovariance<MODEL>::~ErrorCovariance done" << std::endl;
+ErrorCovariance4D<MODEL>::~ErrorCovariance4D() {
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::~ErrorCovariance4D starting" << std::endl;
+  util::Timer timer(classname(), "~ErrorCovariance4D");
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::~ErrorCovariance4D done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance4D<MODEL>::advectedLinearize(const State4D_ &,
+                                                 const Geometry_ &) {
+  oops::Log::trace() << "ErrorCovariance4D advectedLinearize." << std::endl;
 }
 
 // -----------------------------------------------------------------------------
 
 template<typename MODEL>
-void ErrorCovariance<MODEL>::doRandomize(Increment4D_ & dx) const {
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doRandomize starting" << std::endl;
-  util::Timer timer(classname(), "doRandomize");
+size_t ErrorCovariance4D<MODEL>::ctlVecSize() const {
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::ctlVecSize starting" << std::endl;
+
+  size_t ctlVecSize = 0;
+  for (size_t jj = 0; jj < hybridBlockChain_.size(); ++jj) {
+    // Add component
+    ctlVecSize += hybridBlockChain_[jj]->ctlVecSize();
+  }
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::ctlVecSize done" << std::endl;
+  return ctlVecSize;
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename MODEL>
+void ErrorCovariance4D<MODEL>::randomize(Increment4D_ & dx) const {
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::randomize starting" << std::endl;
+  util::Timer timer(classname(), "randomize");
 
   // Create FieldSet4D, set to zero
-  oops::FieldSet4D fset4dSum(dx.times(), dx.commTime(), dx.geometry().getComm());
+  oops::FieldSet4D fset4dSum(dx.times(), oops::mpi::myself(), eckit::mpi::comm());
   for (size_t jtime = 0; jtime < fset4dSum.size(); ++jtime) {
     fset4dSum[jtime].init(hybridBlockChain_[0]->outerFunctionSpace(),
                           hybridBlockChain_[0]->outerVariables(),
@@ -334,7 +362,7 @@
   // Loop over components for the central block
   for (size_t jj = 0; jj < hybridBlockChain_.size(); ++jj) {
     // Randomize covariance
-    oops::FieldSet4D fset4dCmp(dx.times(), dx.commTime(), dx.geometry().getComm());
+    oops::FieldSet4D fset4dCmp(dx.times(), oops::mpi::myself(), eckit::mpi::comm());
     hybridBlockChain_[jj]->randomize(fset4dCmp);
 
     // Weight square-root multiplication
@@ -354,20 +382,21 @@
   if (outerBlockChain_) outerBlockChain_->applyOuterBlocks(fset4dSum);
 
   // ATLAS fieldset to Increment_
-  for (size_t jtime = 0; jtime < dx.size(); ++jtime) {
-    dx[jtime].fromFieldSet(fset4dSum[jtime].fieldSet());
+  for (int jtime = dx.first(); jtime <= dx.last(); ++jtime) {
+    dx[jtime].increment().fieldSet() = util::copyFieldSet(fset4dSum[jtime].fieldSet());
+    dx[jtime].increment().synchronizeFields();
   }
 
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doRandomize done" << std::endl;
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::randomize done" << std::endl;
 }
 
 // -----------------------------------------------------------------------------
 
-template<typename MODEL>
-void ErrorCovariance<MODEL>::doMultiply(const Increment4D_ & dxi,
-                                        Increment4D_ & dxo) const {
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doMultiply starting" << std::endl;
-  util::Timer timer(classname(), "doMultiply");
+template <typename MODEL>
+void ErrorCovariance4D<MODEL>::advectedMultiply(const Increment4D_ &dxi,
+                                                Increment4D_ &dxo) const {
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::advectedMultiply starting" << std::endl;
+  util::Timer timer(classname(), "advectedMultiply");
 
   // Copy input
   dxo = dxi;
@@ -415,27 +444,221 @@
   // Apply outer blocks forward
   if (outerBlockChain_) outerBlockChain_->applyOuterBlocks(fset4dSum);
 
-  // ATLAS fieldset to Increment_
-  for (size_t jtime = 0; jtime < dxo.size(); ++jtime) {
-    dxo[jtime].fromFieldSet(fset4dSum[jtime].fieldSet());
+  // ATLAS fieldset to Increment4D_
+  for (int jtime = dxo.first(); jtime <= dxo.last(); ++jtime) {
+    dxo[jtime].increment().fieldSet() = util::copyFieldSet(fset4dSum[jtime].fieldSet());
+    dxo[jtime].increment().synchronizeFields();
   }
 
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doMultiply done" << std::endl;
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::advectedMultiply done" << std::endl;
 }
 
 // -----------------------------------------------------------------------------
 
-template<typename MODEL>
-void ErrorCovariance<MODEL>::doInverseMultiply(const Increment4D_ & dxi, Increment4D_ & dxo) const {
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doInverseMultiply starting" << std::endl;
-  util::Timer timer(classname(), "doInverseMultiply");
+template <typename MODEL>
+void ErrorCovariance4D<MODEL>::advectedInverseMultiply(const Increment4D_ &dxi,
+                                                       Increment4D_ &dxo) const {
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::advectedInverseMultiply starting" << std::endl;
+  util::Timer timer(classname(), "advectedInverseMultiply");
 
   // Iterative inverse
   oops::IdentityMatrix<Increment4D_> Id;
   dxo.zero();
   GMRESR(dxo, dxi, *this, Id, 10, 1.0e-3);
 
-  oops::Log::trace() << "ErrorCovariance<MODEL>::doInverseMultiply done" << std::endl;
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::advectedInverseMultiply done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename MODEL>
+void ErrorCovariance4D<MODEL>::print(std::ostream & os) const {
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::print starting" << std::endl;
+  util::Timer timer(classname(), "print");
+  os << "ErrorCovariance4D<MODEL>::print not implemented";
+  oops::Log::trace() << "ErrorCovariance4D<MODEL>::print done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+// ErrorCovariance as a subcase of ErrorCovariance4D
+// -----------------------------------------------------------------------------
+template <typename MODEL>
+class ErrorCovariance : public oops::ModelSpaceCovarianceBase<MODEL> {
+  using ErrorCovariance4D_ = ErrorCovariance4D<MODEL>;
+  using Geometry_ = oops::Geometry<MODEL>;
+  using Increment_ = oops::Increment<MODEL>;
+  using Increment4D_ = oops::Increment4D<MODEL>;
+  using IncrCtlVec_ = oops::IncrCtlVec<MODEL>;
+  using IncrEnsCtlVec_ = oops::IncrEnsCtlVec<MODEL>;
+  using IncrModCtlVec_ = oops::IncrModCtlVec<MODEL>;
+  using State_ = oops::State<MODEL>;
+  using State4D_ = oops::State4D<MODEL>;
+  using Variables_ = oops::Variables<MODEL>;
+
+ public:
+  typedef ErrorCovarianceParameters<MODEL> Parameters_;
+
+  static const std::string classname() {return "saber::ErrorCovariance";}
+
+  ErrorCovariance(const Geometry_ &, const Variables_ &, const eckit::Configuration &,
+                  const State_ &);
+  ~ErrorCovariance();
+
+  // Methods
+  void linearize(const State_ &, const Geometry_ &) override;
+  void multiply(const Increment_ &, Increment_ &) const override;
+  void inverseMultiply(const Increment_ &, Increment_ &) const override;
+  void multiplySqrt(const IncrCtlVec_ &, Increment_ &) const override;
+  void multiplySqrtTrans(const Increment_ &, IncrCtlVec_ &) const override;
+  void randomize(Increment_ &) const override;
+
+  // Control Vector
+  IncrModCtlVec_ *newIncrModCtlVec() const override {
+    return new IncrModCtlVec_(Bmat4D_->ctlVecSize());
+  }
+  IncrEnsCtlVec_ *newIncrEnsCtlVec() const override {
+    return new IncrEnsCtlVec_();
+  }
+
+ private:
+  void print(std::ostream &) const;
+
+  /// ErrorCovariance 4D
+  std::unique_ptr<ErrorCovariance4D_> Bmat4D_;
+};
+
+// -----------------------------------------------------------------------------
+
+template<typename MODEL>
+ErrorCovariance<MODEL>::ErrorCovariance(const Geometry_ & geom,
+                                        const Variables_ & incVars,
+                                        const eckit::Configuration & config,
+                                        const State_ & xb3D)
+{
+  oops::Log::trace() << "ErrorCovariance::ErrorCovariance starting" << std::endl;
+
+  // 4D compatibility
+  State4D_ xb;
+  xb.push_back(xb3D);
+
+  // ErrorCovariance4D setup
+  Bmat4D_.reset(new ErrorCovariance4D_(geom, incVars, config, xb));
+
+  oops::Log::trace() << "ErrorCovariance::ErrorCovariance done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename MODEL>
+ErrorCovariance<MODEL>::~ErrorCovariance() {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::~ErrorCovariance starting" << std::endl;
+  util::Timer timer(classname(), "~ErrorCovariance");
+  oops::Log::trace() << "ErrorCovariance<MODEL>::~ErrorCovariance done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance<MODEL>::linearize(const State_ &,
+                                       const Geometry_ &) {
+  oops::Log::trace() << "ErrorCovariance linearized." << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename MODEL>
+void ErrorCovariance<MODEL>::randomize(Increment_ & dx3d) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::randomize starting" << std::endl;
+  util::Timer timer(classname(), "randomize");
+
+  // 4D compatibility
+  Increment4D_ dx(dx3d.geometry(), dx3d.variables(), {dx3d.validTime()});
+
+  // ErrorCovariance4D randomize
+  Bmat4D_->randomize(dx);
+
+  // 4D compatibility
+  dx3d = dx[0];
+
+  oops::Log::trace() << "ErrorCovariance<MODEL>::randomize done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance<MODEL>::multiply(const Increment_ &dx3di, Increment_ &dx3do) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiply starting" << std::endl;
+  util::Timer timer(classname(), "multiply");
+
+  // 4D compatibility
+  Increment4D_ dxi(dx3di.geometry(), dx3di.variables(), {dx3di.validTime()});
+  Increment4D_ dxo(dx3do.geometry(), dx3do.variables(), {dx3do.validTime()});
+  dxi[0] = dx3di;
+
+  // ErrorCovariance4D multiply
+  Bmat4D_->advectedMultiply(dxi, dxo);
+
+  // 4D compatibility
+  dx3do = dxo[0];
+
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiply done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance<MODEL>::inverseMultiply(const Increment_ &dx3di, Increment_ &dx3do) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::inverseMultiply starting" << std::endl;
+  util::Timer timer(classname(), "inverseMultiply");
+
+  // 4D compatibility
+  Increment4D_ dxi(dx3di.geometry(), dx3di.variables(), {dx3di.validTime()});
+  Increment4D_ dxo(dx3do.geometry(), dx3do.variables(), {dx3do.validTime()});
+  dxi[0] = dx3di;
+
+  // ErrorCovariance4D inverse multiply
+  Bmat4D_->advectedInverseMultiply(dxi, dxo);
+
+  // 4D compatibility
+  dx3do = dxo[0];
+
+  oops::Log::trace() << "ErrorCovariance<MODEL>::inverseMultiply done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance<MODEL>::multiplySqrt(const IncrCtlVec_ &dv,
+                                          Increment_ &dx3d) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrt starting" << std::endl;
+
+  // 4D compatibility
+  Increment4D_ dx(dx3d.geometry(), dx3d.variables(), {dx3d.validTime()});
+
+  // ErrorCovariance4D square-root multiply
+  throw eckit::Exception("not available in CY46h1", Here());
+
+  // 4D compatibility
+  dx3d = dx[0];
+
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrt done" << std::endl;
+}
+
+// -----------------------------------------------------------------------------
+
+template <typename MODEL>
+void ErrorCovariance<MODEL>::multiplySqrtTrans(const Increment_ &dx3d,
+                                               IncrCtlVec_ &dv) const {
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrtTrans starting" << std::endl;
+
+  // 4D compatibility
+  Increment4D_ dx(dx3d.geometry(), dx3d.variables(), {dx3d.validTime()});
+  dx[0] = dx3d;
+
+  // ErrorCovariance4D transposed square-root multiply
+  throw eckit::Exception("not available in CY46h1", Here());
+
+  oops::Log::trace() << "ErrorCovariance<MODEL>::multiplySqrtTrans done" << std::endl;
 }
 
 // -----------------------------------------------------------------------------
