--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberEnsembleBlockChain.h.tmp.bak	2024-01-25 15:54:43.170473370 +0100
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberEnsembleBlockChain.h	2024-01-25 15:57:07.390710935 +0100
@@ -17,8 +17,8 @@
 
 #include "oops/base/FieldSet4D.h"
 #include "oops/base/FieldSets.h"
-#include "oops/base/Geometry.h"
-#include "oops/base/Increment.h"
+#include "oops/interface/Geometry.h"
+#include "oops/interface/Increment.h"
 #include "oops/interface/ModelData.h"
 #include "oops/util/Logger.h"
 #include "oops/util/Random.h"
@@ -27,6 +27,7 @@
 #include "saber/blocks/SaberBlockParametersBase.h"
 #include "saber/blocks/SaberOuterBlockChain.h"
 #include "saber/blocks/SaberParametricBlockChain.h"
+#include "saber/oops/ECUtilities.h"
 #include "saber/oops/Utilities.h"
 
 namespace saber {
@@ -78,7 +79,11 @@
   /// @brief patch::Variables used in the ensemble covariance.
   /// TODO(AS): check whether this is needed or can be inferred from ensemble.
   oops::patch::Variables vars_;
+  /// @brief Geometry communicator.
+  /// TODO(AS): this can be removed once FieldSet4D/FieldSet3D are used.
+  const eckit::mpi::Comm & comm_;
   int seed_ = 7;  // For reproducibility
+  const oops::GeometryData geomData_;
 };
 
 // -----------------------------------------------------------------------------
@@ -97,8 +102,10 @@
                        oops::FieldSets & fsetDualResEns,
                        const eckit::LocalConfiguration & covarConf,
                        const eckit::Configuration & conf)
-  : outerFunctionSpace_(geom.functionSpace()), outerVariables_(outerVars),
-    ensemble_(fsetEns), ctlVecSize_(0) {
+  : outerFunctionSpace_(geom.geometry().functionSpace()), outerVariables_(outerVars),
+    ensemble_(fsetEns), ctlVecSize_(0), comm_(eckit::mpi::comm()),
+    geomData_(geom.geometry().functionSpace(), geom.geometry().fields(),
+    geom.geometry().levelsAreTopDown(), eckit::mpi::comm()) {
   oops::Log::trace() << "SaberEnsembleBlockChain ctor starting" << std::endl;
 
   // Check that there is an ensemble of at least 2 members.
@@ -123,7 +130,7 @@
   oops::patch::Variables currentOuterVars = outerBlockChain_ ?
                                      outerBlockChain_->innerVars() : outerVars;
   const oops::GeometryData & currentOuterGeom = outerBlockChain_ ?
-                                     outerBlockChain_->innerGeometryData() : geom.generic();
+                                     outerBlockChain_->innerGeometryData() : geomData_;
 
   // Get parameters:
   SaberCentralBlockParametersWrapper saberCentralBlockParamsWrapper;
@@ -151,7 +158,7 @@
   eckit::LocalConfiguration centralBlockConf = conf.getSubConfiguration("saber central block");
   const double inflationValue = centralBlockConf.getDouble("inflation value", 1);
   oops::Log::info() << "Info     : Read inflation field" << std::endl;
-  oops::FieldSet3D inflationField(fset4dXb[0].validTime(), geom.getComm());
+  oops::FieldSet3D inflationField(fset4dXb[0].validTime(), eckit::mpi::comm());
   // Read ATLAS inflation file
   if (centralBlockConf.has("inflation field.atlas file")) {
     eckit::LocalConfiguration inflationConf =
@@ -173,12 +180,15 @@
                               centralBlockConf.getSubConfiguration("inflation field.model file");
     // Copy file
     // Read fieldsets as increments
+    // Create variables
+    oops::Variables<MODEL> activeVarsT(templatedVarsConf(activeVars));
+
     // Create increment
-    oops::Increment<MODEL> dx(geom, activeVars, fset4dXb[0].validTime());
+    oops::Increment<MODEL> dx(geom, activeVarsT, fset4dXb[0].validTime());
     dx.read(inflationConf);
     oops::Log::test() << "Norm of input parameter inflation"
                       << ": " << dx.norm() << std::endl;
-    inflationField.deepCopy(dx.fieldSet());
+    inflationField.deepCopy(dx.increment().fieldSet());
   }
 
   // Apply inflation on ensemble members
