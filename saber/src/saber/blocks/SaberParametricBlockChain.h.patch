--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberParametricBlockChain.h.tmp.bak	2023-12-03 13:05:34.168171869 +0100
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberParametricBlockChain.h	2023-12-03 11:26:43.577975821 +0100
@@ -74,6 +74,8 @@
   size_t size4D_;
   oops::patch::Variables centralVars_;
   atlas::FunctionSpace centralFunctionSpace_;
+  const oops::GeometryData geomData_;
+  const oops::GeometryData dualResGeomData_;
 };
 
 // -----------------------------------------------------------------------------
@@ -90,9 +92,13 @@
                        std::vector<oops::FieldSet3D> & fsetDualResEns,
                        const eckit::LocalConfiguration & covarConf,
                        const eckit::Configuration & conf)
-  : outerFunctionSpace_(geom.functionSpace()), outerVariables_(outerVars),
+  : outerFunctionSpace_(geom.geometry().functionSpace()), outerVariables_(outerVars),
   crossTimeCov_(covarConf.getString("time covariance") == "multivariate duplicated"),
-  timeComm_(geom.timeComm()), size4D_(fset4dXb.size()) {
+  timeComm_(oops::mpi::myself()), size4D_(fset4dXb.size()),
+  geomData_(geom.geometry().functionSpace(), geom.geometry().fields(),
+  geom.geometry().levelsAreTopDown(), eckit::mpi::comm()),
+  dualResGeomData_(dualResGeom.geometry().functionSpace(), dualResGeom.geometry().fields(),
+  dualResGeom.geometry().levelsAreTopDown(), eckit::mpi::comm()) {
   oops::Log::trace() << "SaberParametricBlockChain ctor starting" << std::endl;
 
   // If needed create outer block chain
@@ -112,7 +118,7 @@
   const oops::patch::Variables currentOuterVars = outerBlockChain_ ?
                              outerBlockChain_->innerVars() : outerVariables_;
   const oops::GeometryData & currentOuterGeom = outerBlockChain_ ?
-                             outerBlockChain_->innerGeometryData() : geom.generic();
+                             outerBlockChain_->innerGeometryData() : geomData_;
 
   SaberCentralBlockParametersWrapper saberCentralBlockParamsWrapper;
   saberCentralBlockParamsWrapper.deserialize(conf.getSubConfiguration("saber central block"));
@@ -167,7 +173,7 @@
 
       for (size_t ie = 0; ie < nens; ++ie) {
         // Read ensemble member
-        oops::FieldSet3D fset(fset4dXb[0].validTime(), geom.getComm());
+        oops::FieldSet3D fset(fset4dXb[0].validTime(), eckit::mpi::comm());
         readEnsembleMember(geom, outerVariables_, ensembleConf, ie, fset);
 
         // Apply outer blocks inverse (all of them)
@@ -198,7 +204,7 @@
     oops::Log::info() << "Info     : Dual resolution setup" << std::endl;
 
     // Dual resolution setup
-    centralBlock_->dualResolutionSetup(dualResGeom.generic());
+    centralBlock_->dualResolutionSetup(dualResGeomData_);
 
     // Ensemble configuration
     eckit::LocalConfiguration dualResEnsembleConf
@@ -216,7 +222,7 @@
 
       for (size_t ie = 0; ie < dualResNens; ++ie) {
         // Read ensemble member
-        oops::FieldSet3D fset(fset4dXb[0].validTime(), dualResGeom.getComm());
+        oops::FieldSet3D fset(fset4dXb[0].validTime(), eckit::mpi::comm());
         readEnsembleMember(dualResGeom, outerVariables_, dualResEnsembleConf, ie, fset);
 
         // Use FieldSet in the central block
@@ -247,18 +253,18 @@
     const eckit::LocalConfiguration outputEnsembleConf(covarConf, "output ensemble");
 
     // Check whether geometry grid is similar to the last outer block inner geometry
-    const bool useModelWriter = (util::getGridUid(geom.functionSpace())
+    const bool useModelWriter = (util::getGridUid(geom.geometry().functionSpace())
       == util::getGridUid(currentOuterGeom.functionSpace()));
 
     // Get ensemble size
     size_t ensembleSize = ensembleConf.getInt("ensemble size");
 
     // Estimate mean
-    oops::FieldSet3D fsetMean(fset4dXb[0].validTime(), geom.getComm());
+    oops::FieldSet3D fsetMean(fset4dXb[0].validTime(), eckit::mpi::comm());
     if (iterativeEnsembleLoading) {
       for (size_t ie = 0; ie < ensembleSize; ++ie) {
         // Read member
-        oops::FieldSet3D fsetMem(fset4dXb[0].validTime(), geom.getComm());
+        oops::FieldSet3D fsetMem(fset4dXb[0].validTime(), eckit::mpi::comm());
         readEnsembleMember(geom, activeVars, ensembleConf, ie, fsetMem);
 
         // Update mean
@@ -281,14 +287,16 @@
 
     for (size_t ie = 0; ie < ensembleSize; ++ie) {
       oops::Log::info() << "Info     : Write member " << ie << std::endl;
+      // Create variables
+      oops::Variables<MODEL> activeVarsT(templatedVarsConf(activeVars));
 
       // Increment pointer
-      oops::Increment<MODEL> dx(geom, activeVars, fset4dXb[0].validTime());
+      oops::Increment<MODEL> dx(geom, activeVarsT, fset4dXb[0].validTime());
 
       // Get ensemble member
       if (iterativeEnsembleLoading) {
         // Read ensemble member
-        oops::FieldSet3D fset(fset4dXb[0].validTime(), geom.getComm());
+        oops::FieldSet3D fset(fset4dXb[0].validTime(), eckit::mpi::comm());
         readEnsembleMember(geom, activeVars, ensembleConf, ie, fset);
 
         // Remove mean
@@ -298,14 +306,14 @@
         if (outerBlockChain_) outerBlockChain_->leftInverseMultiply(fset);
 
         // Copy fieldSet
-        dx.fieldSet().deepCopy(fset);
+        dx.increment().fieldSet() = fset.fieldSet();
       } else {
         // Copy member
-        dx.fieldSet().deepCopy(fsetEns[ie]);
+        dx.increment().fieldSet() = fsetEns[ie].fieldSet();
       }
 
       // ATLAS fieldset to Increment_
-      dx.synchronizeFields();
+      dx.increment().synchronizeFields();
 
       if (useModelWriter) {
         // Use model writer
